/*
 * Helpdesk API
 * ticketing/queuing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DisplayTicketsApi {
    private ApiClient localVarApiClient;

    public DisplayTicketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DisplayTicketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for queuingFromToPost
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param inlineObject2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuingFromToPostCall(String from, String to, InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject2;

        // create path and map variables
        String localVarPath = "/queuing/{from}/{to}"
            .replaceAll("\\{" + "from" + "\\}", localVarApiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuingFromToPostValidateBeforeCall(String from, String to, InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling queuingFromToPost(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling queuingFromToPost(Async)");
        }
        

        okhttp3.Call localVarCall = queuingFromToPostCall(from, to, inlineObject2, _callback);
        return localVarCall;

    }

    /**
     * Display all tickets for queuing
     * 
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param inlineObject2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void queuingFromToPost(String from, String to, InlineObject2 inlineObject2) throws ApiException {
        queuingFromToPostWithHttpInfo(from, to, inlineObject2);
    }

    /**
     * Display all tickets for queuing
     * 
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param inlineObject2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queuingFromToPostWithHttpInfo(String from, String to, InlineObject2 inlineObject2) throws ApiException {
        okhttp3.Call localVarCall = queuingFromToPostValidateBeforeCall(from, to, inlineObject2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Display all tickets for queuing (asynchronously)
     * 
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param inlineObject2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuingFromToPostAsync(String from, String to, InlineObject2 inlineObject2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuingFromToPostValidateBeforeCall(from, to, inlineObject2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for specificationFromToTeamIdPost
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specificationFromToTeamIdPostCall(Long specification, String from, String to, Long teamId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/{specification}/{from}/{to}/{teamId}"
            .replaceAll("\\{" + "specification" + "\\}", localVarApiClient.escapeString(specification.toString()))
            .replaceAll("\\{" + "from" + "\\}", localVarApiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", localVarApiClient.escapeString(to.toString()))
            .replaceAll("\\{" + "teamId" + "\\}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificationFromToTeamIdPostValidateBeforeCall(Long specification, String from, String to, Long teamId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'specification' is set
        if (specification == null) {
            throw new ApiException("Missing the required parameter 'specification' when calling specificationFromToTeamIdPost(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling specificationFromToTeamIdPost(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling specificationFromToTeamIdPost(Async)");
        }
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling specificationFromToTeamIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = specificationFromToTeamIdPostCall(specification, from, to, teamId, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Display all tickets for Admin and Support
     * 
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param inlineObject  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void specificationFromToTeamIdPost(Long specification, String from, String to, Long teamId, InlineObject inlineObject) throws ApiException {
        specificationFromToTeamIdPostWithHttpInfo(specification, from, to, teamId, inlineObject);
    }

    /**
     * Display all tickets for Admin and Support
     * 
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> specificationFromToTeamIdPostWithHttpInfo(Long specification, String from, String to, Long teamId, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = specificationFromToTeamIdPostValidateBeforeCall(specification, from, to, teamId, inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Display all tickets for Admin and Support (asynchronously)
     * 
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specificationFromToTeamIdPostAsync(Long specification, String from, String to, Long teamId, InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificationFromToTeamIdPostValidateBeforeCall(specification, from, to, teamId, inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for specificationFromToTeamIdUserIdPost
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param userId Parameter for specific from date (required)
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specificationFromToTeamIdUserIdPostCall(Long specification, String from, String to, Long teamId, String userId, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/{specification}/{from}/{to}/{teamId}/{userId}"
            .replaceAll("\\{" + "specification" + "\\}", localVarApiClient.escapeString(specification.toString()))
            .replaceAll("\\{" + "from" + "\\}", localVarApiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", localVarApiClient.escapeString(to.toString()))
            .replaceAll("\\{" + "teamId" + "\\}", localVarApiClient.escapeString(teamId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificationFromToTeamIdUserIdPostValidateBeforeCall(Long specification, String from, String to, Long teamId, String userId, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'specification' is set
        if (specification == null) {
            throw new ApiException("Missing the required parameter 'specification' when calling specificationFromToTeamIdUserIdPost(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling specificationFromToTeamIdUserIdPost(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling specificationFromToTeamIdUserIdPost(Async)");
        }
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling specificationFromToTeamIdUserIdPost(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling specificationFromToTeamIdUserIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = specificationFromToTeamIdUserIdPostCall(specification, from, to, teamId, userId, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Display all tickets for specific user
     * 
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param userId Parameter for specific from date (required)
     * @param inlineObject1  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void specificationFromToTeamIdUserIdPost(Long specification, String from, String to, Long teamId, String userId, InlineObject1 inlineObject1) throws ApiException {
        specificationFromToTeamIdUserIdPostWithHttpInfo(specification, from, to, teamId, userId, inlineObject1);
    }

    /**
     * Display all tickets for specific user
     * 
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param userId Parameter for specific from date (required)
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> specificationFromToTeamIdUserIdPostWithHttpInfo(Long specification, String from, String to, Long teamId, String userId, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = specificationFromToTeamIdUserIdPostValidateBeforeCall(specification, from, to, teamId, userId, inlineObject1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Display all tickets for specific user (asynchronously)
     * 
     * @param specification Parameter for specific ticket status (required)
     * @param from Parameter for specific from date (required)
     * @param to Parameter for specific to date (required)
     * @param teamId Parameter for specific from date (required)
     * @param userId Parameter for specific from date (required)
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You are not authorized to access the page. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Key. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> System key expired, please contact the administrator. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid Token. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call specificationFromToTeamIdUserIdPostAsync(Long specification, String from, String to, Long teamId, String userId, InlineObject1 inlineObject1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificationFromToTeamIdUserIdPostValidateBeforeCall(specification, from, to, teamId, userId, inlineObject1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
